# import UserOrderByInput, WidgetOrderByInput from './generated/prisma.graphql'

type Query {
    users(query: String, first: Int, skip: Int, after: String, orderBy: UserOrderByInput): [User!]!
    me: User!
    widgets(query: String, first: Int, skip: Int, after: String, orderBy: WidgetOrderByInput): [Widget!]!
}

type Mutation {
    createUser(data: CreateUserInput!): AuthPayload!
    updateUser(data: UpdateUserInput!): User!
    deleteUser: User!
    login(data: LoginUserInput!): AuthPayload!
    createWidget(data: CreateWidgetInput!): Widget!
    updateWidget(id: ID!, data: UpdateWidgetInput!): Widget!
    deleteWidget(id: ID!): Widget!
}

# type Subscription {

# }

type AuthPayload {
    token: String!,
    user: User!
}

input CreateUserInput {
    email: String!
    username: String!
    password: String!
}

input LoginUserInput {
    email: String!
    password: String!
}

input UpdateUserInput {
    username: String
    email: String
    password: String
}

input CreateWidgetInput {
    text: String!
}

input UpdateWidgetInput {
    text: String
}

type User {
    id: ID!
    email: String
    username: String!
    updatedAt: String!
    createdAt: String!
    widgets:[Widget!]!
}

type Widget {
    id: ID!
    text: String!
    owner: User!
}